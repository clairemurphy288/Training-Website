{"ast":null,"code":"var _jsxFileName = \"/Users/clairemurphy/Documents/web-development/Training-Website/client/src/components/quiz/questions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './question.css';\nimport { useLocation } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GetQuestions() {\n  _s();\n\n  const location = useLocation();\n  const stateQuiz = location.state;\n  const navigate = useNavigate();\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [randomArray, setRandom] = useState(random(stateQuiz.size));\n\n  function random(size) {\n    let arr = []; //double check this range is correct\n\n    for (let i = 0; i < size; i++) {\n      arr.push(stateQuiz.quiz.questions[Math.floor(Math.random() * stateQuiz.quiz.questions.length)]);\n    }\n\n    return arr;\n  }\n\n  useEffect(() => {\n    if (showScore) {\n      setTimeout(() => {\n        onLoad();\n      }, 2000);\n    }\n  }, [showScore, score]);\n\n  function handleAnswerButtonClick(choice) {\n    let id = randomArray[questionNumber].indexOfAnswer;\n\n    if (questionNumber < stateQuiz.size - 1) {\n      if (choice === randomArray[questionNumber].answerChoices[id]) {\n        setScore(score + 1);\n        setQuestionNumber(questionNumber + 1);\n        alert('correct');\n      } else {\n        setQuestionNumber(questionNumber + 1);\n        alert('incorrect');\n      }\n    } else {\n      if (choice === randomArray[questionNumber].answerChoices[id]) {\n        setScore(score + 1);\n        setShowScore(true);\n      } else {\n        setShowScore(true);\n      }\n    }\n  }\n\n  function onLoad() {\n    console.log(\"triggered\");\n    navigate(\"/scores\", {\n      state: {\n        score: score,\n        quiz: stateQuiz.quiz.name\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-app\",\n    children: showScore ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-score-section\",\n      children: [\"You scored \", score, \" out of \", randomArray.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this) //after a few seconds navigate to score board\n    : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-question-count\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Question \", questionNumber + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this), \"/\", randomArray.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-question-text\",\n          children: randomArray[questionNumber].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-answer-section\",\n        children: randomArray[questionNumber].answerChoices.map((answerChoices, index) => answerChoices !== \"\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"question-button-section\",\n          onClick: () => handleAnswerButtonClick(answerChoices),\n          children: answerChoices\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 48\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            visibility: \"hidden\"\n          },\n          children: \"Blank Div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 27\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GetQuestions, \"KRrhWDIeIl+rDOwO+qtgU/7VQRI=\", false, function () {\n  return [useLocation, useNavigate];\n});\n\n_c = GetQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetQuestions\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","GetQuestions","location","stateQuiz","state","navigate","score","setScore","showScore","setShowScore","questionNumber","setQuestionNumber","randomArray","setRandom","random","size","arr","i","push","quiz","questions","Math","floor","length","setTimeout","onLoad","handleAnswerButtonClick","choice","id","indexOfAnswer","answerChoices","alert","console","log","name","question","map","index","visibility"],"sources":["/Users/clairemurphy/Documents/web-development/Training-Website/client/src/components/quiz/questions.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './question.css';\nimport {useLocation} from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function GetQuestions() {\n    const location = useLocation();\n    const  stateQuiz  = location.state;\n\n    const navigate = useNavigate();\n\n    const [score, setScore] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n\n\n    const [questionNumber, setQuestionNumber] = useState(0);\n    const [randomArray, setRandom] = useState(random(stateQuiz.size));\n\n    function random(size) {\n        let arr = [];\n        //double check this range is correct\n        for (let i = 0; i < size; i++) {\n            arr.push(stateQuiz.quiz.questions[Math.floor(Math.random() * (stateQuiz.quiz.questions.length))])\n        }\n        return arr;\n    }\n\n    useEffect(() => {\n        if (showScore) {\n            setTimeout(()=> {\n                onLoad()\n            }, 2000)\n        }\n    }, [showScore, score])\n\n    function handleAnswerButtonClick(choice) {\n        let id = randomArray[questionNumber].indexOfAnswer;\n        if(questionNumber < stateQuiz.size-1) {\n            if(choice === randomArray[questionNumber].answerChoices[id]){\n                setScore(score + 1);\n                setQuestionNumber(questionNumber + 1);\n                alert('correct');\n            } else {\n                setQuestionNumber(questionNumber + 1);\n                alert('incorrect');\n            } \n        } else {\n            if(choice === randomArray[questionNumber].answerChoices[id]){\n                setScore(score + 1);\n                setShowScore(true);\n              \n            } else {\n                setShowScore(true);\n            }\n        }\n             \n    }\n    function onLoad() {\n        console.log(\"triggered\");\n        navigate(\"/scores\", {state: {score: score, quiz: stateQuiz.quiz.name}})\n\n    }\n    return (\n        <div className=\"question-app\">\n            {showScore ? (\n                <div className='question-score-section'>\n\t\t\t\t\tYou scored {score} out of {randomArray.length}\n\t\t\t\t</div>\n                //after a few seconds navigate to score board\n                ) : (\n                    <>\n                    <div className=\"question-question-section\">\n                        <div className=\"question-question-count\">\n                            <span>Question {questionNumber + 1}</span>/{randomArray.length}\n                        </div>\n                        <div className='question-question-text'>{randomArray[questionNumber].question}</div>\n                    </div>\n                    <div className=\"question-answer-section\">\n                    {randomArray[questionNumber].answerChoices.map((answerChoices, index) => (\n                        answerChoices !== \"\" ? <button className=\"question-button-section\" onClick={() => handleAnswerButtonClick(answerChoices)}  >{answerChoices}</button>\n                        : <div style={{visibility: \"hidden\"}}>Blank Div</div>))}\n                    </div>\n                    </>\n                )}\n            \n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}